*** GENERAL NOTES *** 
* Removal of an edge/node cannot be performed online (without mutex)
* Non stable edges pointer when multithreading
* Database has to have >1 example before executing training thread

* grow_mutex issue.


*** TO DO SMALL ***
*     if(!nearest_index || nearest_index[0] == nearest_index[1]) return; //something went wrong
* code metrics plugin
* obtaining iterator to back()
* operator[] in ExtNodeManager should return reference not pointer
* crash test with growing .
* calculate or betha powers

*** TO DO ***
* Adopt Arma for error calculation
* in RcppInterface and SHGraphDefs implement faster algorithms (from libraries) loop unrolling etc
* gngDatabase - scoped lock and draw example pointer ! (copying is pointless - add const modifier)
* move consts and typedef to be organised
* RcppInterface.cpp -> hack for erasing edges out of buffer. ( slowing things down unnecessarily)
* edge removal mutex instead of single grow_mutex cause can lead to locking
* account for no-node in R scritps
* in RcppInterface alg shouldnt be in ggi - bad solution

*** QUESTIONS ***
* what to do about grow_mutex
* 0 outgoing edges vertex?

*** TO DO BIGGER STUFF ***
* get rid of offset_ptr in GNGNode class, as it is created in the SH and should work well (itself is an offset_pointer), unnecessary overhead
* documentation
* header cleaning
* memory managing (delete functions)
* oddzielic .h od .cpp , dorobic .hpp gdzie potrzebne
* GNGList - own implementation : to omit cumbersome iterators things and multiple inheritance from boost library.
* Integrate GNGGraphInfo with GNGGraph - inner class !!
* list of inserted nodes?
* uniform grid hack? bad design. (SOLUTION: wrapper for node_pool with operator[] as a parameter to template and parameter in constructor)
* rare errors in uniform grid?

*** IDEAS ***
* change g_pool_nodes to something like offset_ptr<vector<Node>> so it is always the same
* ExtNodeGraphManager - good idea for file sharing or sth simillar?


*** RCPP INTERFACE ***
* nodeMatrix index doesnt match with node number ! pretty important !, in buffer indexes are correct


*** CLASSES ***

* ExtGraphNodeManager - generalny manager wierzcholkow, razem z klasami z SHGraphDefs pozwala na dowolna odseparowana implementacje pamieci, wymaga
pewnych rzeczy od klas templatowych, np kontener krawedzi musi miec wiekszosc rzeczy typu .begin(), .back() etc

* Klasy z SHGraphDefs.h, oraz GNGGraph.h definiuja implementacje SHM do ExtGraphNodeManager - posluguja sie biblioteka Boost poniewaz SHM jest zaimplementowane
z uzyciem biblioteki Boost

* SHMemoryManager implementuje "bebechy" SHM w oparciu o biblioteke Boost - mozna ja w dowolnej chwili zmienic

